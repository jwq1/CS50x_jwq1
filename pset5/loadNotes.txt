Week 5 Specs:

Alright, the challenge now before you is to implement load, check, size, and unload as efficiently as possible, in such a way that TIME IN load, TIME IN check, TIME IN size, and TIME IN unload are all minimized. To be sure, it’s not obvious what it even means to be minimized, inasmuch as these benchmarks will certainly vary as you feed speller different values for dictionary and for text. But therein lies the challenge, if not the fun, of this problem. This problem is your chance to design. Although we invite you to minimize space, your ultimate enemy is time. But before you dive in, some specifications from us.


Implement as efficiently as possible.

___ TIME IN load is minimal

___ TIME IN check is minimal
___ TIME IN size is minimal


___ TIME IN unload is minimal


___ You may not alter speller.c.

___ You may alter dictionary.c (and, in fact, must in order to complete the implementations of load, check, size, and unload), but you may not alter the declarations of load, check, size, or unload.

___ You may alter dictionary.h, but you may not alter the declarations of load, check, size, or unload.

___ You may alter Makefile.

___ You may add functions to dictionary.c or to files of your own creation so long as all of your code compiles via make.

___ Your implementation of check must be case-insensitive. In other words, if foo is in dictionary, then check should return true given any capitalization thereof; none of foo, foO, fOo, fOO, fOO, Foo, FoO, FOo, and FOO should be considered misspelled.

___ Capitalization aside, your implementation of check should only return true for words actually in dictionary. Beware hard-coding common words (e.g., the), lest we pass your implementation a dictionary without those same words. Moreover, the only possessives allowed are those actually in dictionary. In other words, even if foo is in dictionary, check should return false given foo’s if foo’s is not also in dictionary.

___ You may assume that check will only be passed strings with alphabetical characters and/or apostrophes.

___ You may assume that any dictionary passed to your program will be structured exactly like ours, lexicographically sorted from top to bottom with one word per line, each of which ends with \n. You may also assume that dictionary will contain at least one word, that no word will be longer than LENGTH (a constant defined in dictionary.h) characters, that no word will appear more than once, and that each word will contain only lowercase alphabetical characters and possibly apostrophes.

___ Your spell checker may only take text and, optionally, dictionary as input. Although you might be inclined (particularly if among those more comfortable) to "pre-process" our default dictionary in order to derive an "ideal hash function" for it, you may not save the output of any such pre-processing to disk in order to load it back into memory on subsequent runs of your spell checker in order to gain an advantage.

___ Your spell checker may not leak any memory.

___ You may search for (good) hash functions online, so long as you cite the origin of any hash function you integrate into your own code.

Alright, ready to go?

Implement load.

Implement check.

Implement size.

Implement unload.







Week 5 Notes:

    Q:In the "Implementing a Stack" portion of the lecture (44:00),
        David talks about being able to use linked lists to create a dynamic chunk of memory in a structure.

        This is as opposed to something like the following.

        typedef struct
        {
            int *number;
        }
        number;


        How is the linked list able to create a dynamic section of memory, where these current structs cannot?

        David mentioned something about using malloc();

        1)
        Does he mean we could use malloc within this typdef struct section of our code
        (e.g. int *number = malloc(CAPACITY) )

        OR

        1.2)
        Does he mean we should use   int *number  in the struct, whereby the pointer value would be given to the struct,
        then outside the struct, the program could do number = malloc(); Thereby allocating a dynamic chunk of memory to number.

        OR

        2)
        Does he mean by using the node structure we learned about in a linked list, we could use an insert function to expand the size of our memory.

    A: I think he means the latter, 2. In the first, we would need to somehow collect information which tells us our capacity.
        Unfortunately, trying to pass CAPACITY into a struct does not seem like an option. A struct is not a function.

        Therefore, the only way to increase the size of a struct based on the users input, would be to create a linked list,
        then use an insert new nodes into that list.

        Howeverrr... he does mention we should use malloc, which makes me skeptical about my above answer.
        The correct answer could be 1 or 1.2 as well.

        May need to look more into this (i.e. test it out) if more is not explained later.

        A.1: seems like 1.2 is the correct answer based on 54:40 of the lecture.


    Q: What syntax do I use to assign vlaues to a multi line struct (e.g. how do i alloc a struct?)
    A:


    Q: How is a Trie constructed?
        Does the array linked to the first level have more than 2 nodes attached to it?
    A:


    Q: How is a Trie searched?
        How is it searched if it is alphabetic?
        What if you have uppercase & lowercase?
    A:


    Q: Why do we undefine calculate and getrusage?

        #undef calculate
        #undef getrusage

        Is it because there are multiple definitions of calculate and getrusage?
        Do we want to clear the last definition to make way for the new one?
    A:


    Q: Why do we #ifndef in the dicationary.h header file?

        #ifndef DICTIONARY_H
        #define DICTIONARY_H

        Won't the DICTIONARY header by defined with the #DEFINE?
    A:


    Q: Where is the R usage file, rusage? How does if work?
        Why are we passing in the structure at 'b' and the structure at 'a' to run the calculate function?

        // prototype
        double calculate(const struct rusage *b, const struct rusage *a);

    A:  We are passing these into the calculation function becuase it will calculate the time
        specifically attributed to the function we gathered the &before and &after information for.

        The calculate function is down at the bottom of speller.c

        speller.c:183
        /**
         * Returns number of seconds between b and a.
         */


    Q: What is the rusage before

        // structs for timing data
        struct rusage before, after;

    A:


    Q: Why are the benchmarks initialized to 0.0?

        // benchmarks
        double time_load = 0.0, time_check = 0.0, time_size = 0.0, time_unload = 0.0;

    A: Probably because we want to time back in the form of a double.
        By initilalizing at 0.0 we ensure we reset the time from whatever might have been stored in the double before.



speller.c:35
    // determine dictionary to use
    char* dictionary = (argc == 3) ? argv[1] : DICTIONARY;


    Q: How do we determine what dictionary to use?

        // determine dictionary to use
        char* dictionary = (argc == 3) ? argv[1] : DICTIONARY;

    A: See conditional operator syntax at https://www.programiz.com/c-programming/c-operators
        If there are three command line arguments, then dictionary will point to whatever file is pointed to by argv[1],

        If there is not three arguments, then it will default to whatever dictionary is stored in DICTIONARY.

            speller.c:15
            // default dictionary
            #define DICTIONARY "dictionaries/large"

        In this case, DICTIONARY is dictionaries/large




speller.c:38
    // load dictionary
    getrusage(RUSAGE_SELF, &before);
    bool loaded = load(dictionary);
    getrusage(RUSAGE_SELF, &after);


    Q:
        1.
        How does getrusage work?
        What does it do?


        2.
        How is a value assigned to the 'before' variable.
        Why do we only care about the address of 'before', rather than the value?

        3.
        What is RUSAGE_SELF?

        // load dictionary
        getrusage(RUSAGE_SELF, &before);
        bool loaded = load(dictionary);
        getrusage(RUSAGE_SELF, &after);

    A:
        1. getrusage() measures the resources used by a certain process.

            Synatx is int getrusage(int who, struct rusage *usage);

            who - can be several options. The option used in speller.c is RUSAGE_SELF.
                This measures the resources in use by all the threads in the current process.

            the rusage structure is quite complex. It has many many variables in it.
            We have access to through storing the information with getrusage.

            The most important of these variables for our purposes are the following.
                ru_utime, which is the total time spent to execute in user mode.
                It is expressed in timeval structure (seconds plus microseconds)

                ru_stime, which is time spent executing in kernal usage mode.

                struct rusage {
                   struct timeval ru_utime; /* user CPU time used */
                   struct timeval ru_stime; /* system CPU time used */

            There is also the option to measure the Child processes,
            but since the program here uses RUSAGE_SELF,
            rather than RUSAGE_CHILDREN, I do not think we need to concern ourselves with the child processing time.



        2. the before pointer is a pointer to an rusage struct
            The information saved in this struct is the rusage before we load the dictionary.

            the after variable is the rusage information after we load the dictionary.

            I assume the difference between the two is what we get by running the calculate function.

            It is important to note that if we are saving the before and after information,
            then getrusage probably does not measure from zero.
            getrusage probably has a constantly running time.
            We most likely have to collect the time at the start of a process, then the time at the end of the process, then take the difference

            This is rather misleading, because getrusage talks about getting the running time to the current threads in process.
            From our calculate function, it seems like that is not the case.
            Rather it seems if we use getrusage at the start and end of a process,
            then we can calculate the time spent executing a process ourselves. getrusage does not do the calculation for us.

        3. RUSAGE_SELF is the argument we pass into getrusage to measure the resources used by the calling processes,
            which is the sum of resources used by all threads in the process.

            Again, this seems to be misleading, because we calculate the before and after.

            Actually, eurika. I think we calculate the before and after,
            because there are actually many many process being executed at the time we run getrusage()

            Therefore if we call this function before we call the 'load' function, to load the dictionary,
            then we have just added one extra function to the process in the current thread.

            Then if we call getruage again after we run the function,
            maybe we can get the resources used after the dictionary loading has stopped.

            I could have this backwards. The before could be the resources used before dictionary is loaded.

            After could be the resources used by the dictionary loading, plus the previous functions.

            This needs to be looked into further, because it seems like the getrusage is called before and after the load function,
            neither of which measures the resource usage, during the load() function.

        Q: Does resource usage stay at a higher level after a function is used. In other words, is resourage usage cumulative?
            Does calling getrusage directly after a function like load(), cause getrusage to collect resource usage for the load() function
            because it is current running when getrusage is called. Therefore, getrusage collects information for that current process?

            My real question is how does getrusage interact with the load function?
                There are two calls to getrusage, and two pointers which lead to rusage data.
                Why is this necessary? Why is the calculate function necessary?

        A:


speller.c:43
    // abort if dictionary not loaded
    if (!loaded)

        Q:  How does, if (!loaded) , work?
        A:  This is, "if, not loaded," in pseudocode.
            Since we are trying to load the dictionary, this means if the dictionary is not loaded.

            However, why is the conditional syntax not the following?

                if (loaded != true) {};

            Does ! in front of a boolean always mean, "if not true,"?
            Whereas if one puts a boolean into the

            Essentially what this means is, if (loaded != true).

            Or does it mean if (!false == true), therefore putting a not symbol, !, in front of false
            flips the boolean to be true. Therefore making the conditional true == true correct
            then executing the file.

            It's this ^^^^




speller.c:53
    // try to open text
    char *text = (argc == 3) ? argv[2] : argv[1];
    FILE *fp = fopen(text, "r");
    if (fp == NULL)
    {
        printf("Could not open %s.\n", text);
        unload();
        return 1;
    }

    Q:  What does this block do?
    A:  If argc == 3, in other words, if there is a dictionary passed into the program
        then use argv[2], which is the "text" argument passed in.

        otherwise, if argc != 3, meaning there has not bee a dictionary passed into the function
        then use argv[1], which is the "text".

speller.c:70
    // spell-check each word in text
    for (int c = fgetc(fp); c != EOF; c = fgetc(fp))

    Q:  What does fgetc() do?
    A:  Gets the next character in a file stream

        Syntax:
        int fgetc(FILE * stream);

        returns as an unsigned character, cast as an int,
        or returns EOF, upon end of file or error.

    Q:  How does c reach EOF?
    A:  fgetc() will return EOF
        when the stream reaches the end of the file
            or returns an error.


speller.c:73
    // allow only alphabetical characters and apostrophes
    if (isalpha(c) || (c == '\'' && index > 0))

    Q:  Why is there a backslash in front of the apostraphe
    A:  Because characters save apostrophes with a backslash in front to differentiate them from...

    Q:  Why does index also have to be greater than 0? What is the index? How is it assigned?
    A:  index is initialized to zero in this program. We initialized it above the for loop.
        index starts at zero, but incremements with each loop.

        By saying, "&& index > 0," we essentially say we will only accept apostrophes after the first character.

        If there was an apostrophe at "index == 0" then we would not do anything,
        rather we would move onto the next iteration of the for loop.


speller.c:83
    // consume remainder of alphabetical string
    while ((c = fgetc(fp)) != EOF && isalpha(c));

    Q:  Why do we consume the rest of a string which is too long to be a word?
    A:  Having a while loop here, causes stream to get set to a point
        past a long string of characters, which cannot be a word due to its length.




speller.c:86 && speller.c:125
    // prepare for new word
    index = 0;

    Q:  Why do we rest index to 0 after each conditional?
    A:  Each conditional assigns all the characters in the file to word[index]

        word[] is an array of characters the length of characters of the longest word in the dictionary.

        We declared word with
        char word[LENGTH + 1];

        word is an array
        word is an array of type char
        the array is size LENGTH + 1
        LENGTH is set to 45 in dictionary.h
        the +1 is to incorporate the string termination character "\0"

        Therefore, when we reset index to 0, we restart te process of saving the word in file "text",
        to the character array, word[].




speller.c:104
    // terminate current word
    word[index] = '\0';

    Q:  What do we do with the characters in the array word[]?
    A:



speller.c:107
    // update counter
    words++;

    Q:  Why do we increase word by one at the end of each word?
        Are we checking a whole document?
        I thought this function only took in one piece of text. Are we calling it recursively?
    A:  Yes, when 'text' is written in the usage section, it means a directory containing text.


    Q:  How are words stored in the 'texts' directory (e.g. single file, series of files)?
        How do we progress from one word to another?
    A:  The 'text' is in a single file. Files are type '.txt'. These files are contained in the 'texts' directory.



speller.c:110
    // check word's spelling
    getrusage(RUSAGE_SELF, &before);
    bool misspelled = !check(word);
    getrusage(RUSAGE_SELF, &after);

    Q:  Why do we call getrusage() when we check word's spelling? We already call it above.
    A:  We call the function when we check the words misspelling
        because when we called it above, we only checked the resources used to load the dictionary.

        We want to know how many resources were used to check the word's spelling,
        then add this resource usage to our overall resource usage.

        This is done through the code below.

        speller.c:115
        // update benchmark
        time_check += calculate(&before, &after);



    Q:  How is the boolean assigned to 'misspelled'?
    A:  The check function is used.

        Pseudo:
        return the opposite of whatever check() returns, when we pass in 'word'.

    Q:  What does the check() function do? How does check() work?
    A:  The check() function is stored in dictionary.h

        /**
         * Returns true if word is in dictionary else false.
         */
        bool check(const char *word);

        We return the 'bool misspelled' variable the opposite of whatever check() returns
        because check will return true if the word is spelled correctly.
        It will return false if the word is misspelled.

        Since our variable is 'misspelled', not 'correctly spelled',
        we want 'misspelled' to be true, when check is false.


speller.c:130
    // check whether there was an error
    if (ferror(fp))
    {
        fclose(fp);
        printf("Error reading %s.\n", text);
        unload();
        return 1;
    }

    Q:  What does unload() do?
    A:  It is a function we have to write in the header file.

        It should unload the dictionary from memory.
        Essentially, free(), for whatever memory is used by the dictionary.

        /**
         * Unloads dictionary from memory.  Returns true if successful else false.
         */
        bool unload(void);

        It also needs to return a boolean to let us know whether or not it was successful.



dictionary.h

    bool load(const char *dictionary);


        /*
            Load dictionary into a hash table
            Credit: Dan Bernstein, djb2
            Link: http://www.cse.yorku.ca/~oz/hash.html
        */
        unsigned long hash(unsigned char *str)
        {
            unsigned long hash = 5381;
            int c;

            while (c = *str++)
                hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

            return hash;
        }


    Q:  If load returns a boolean, note a hash, then how does the load() function load the data into memory?
    A:  It has to do load the words from file 'dictionary/large,' into the memory, while in the load function.
        When the load function is complete, the words from the dictionary should already be loaded into memory.

        We probably have to create or use a node type element.

        We also need to dynamically allocate memory for each node.

        We need to make sure to set the node pointer to the first element in the linked list
        before we link the head of the list to the newly created node.



dictionary.c:load()

    Q:  If I create a char* variable as a buffer for my fread() function, will a \0 termination character
        automatically get added to the end of the string?

        If yes, should I skip the \0 termination character when reading?

        Does the fread function automatically skip the \0 character from the FILE *stream?

    A:  Unsure, need to do more resarch.




dictionary.c:load()

    Q:  Should we set this to NULL? Refer to the video on dynamic memory allocation and/or pointers.
        There is some cases where the pointer might point to something important.
        How do I prevent that?

    A:


dictionary.h:struct node()

    Q:  How do I store values inside of a structure with multiple fields in it (e.g. a node with a value and next pointer)
    A:  Type the variable name, then put a '.' then put the name of the field.

        https://youtu.be/6RLxPdZ59y0?t=4m4s explains

        char *dtyWord = pneumonoultramicroscopicsilicovolcanoconiosis

        typedef struct node
        {
            char *word;
            node *next;
        }
        node

        node dictionaryWord = malloc(strlen(dtyWord));

        dictionaryWord.word = dtyWord;
        dictionaryWord.next = NULL;


dictionary.c:load()

    Q:  Do we need to create a new name for each node, similar to the names we created for jpeg files?
    A:


hash function:

    Q:  How does a hash function create it's inital table?
        There is supposed to be this list of head nodes, which linked lists are kept under.
        The hash function is supposed to give the location where we store a certain piece of information in the hash table.

    A:  Create an array of nodes
        node *hashtable[50];


    Q:  How does the node get into the hashtable to begin with?

    A:


    Q:  What format do we need to pass a node to the hash function in?
        It has to somehow use math to deteremine where in the hash table to store the value we pass it.
        It must require the value to be in some format in order to do the math on it.

    A:  Looks like the hash function requires an unsigned char.

        // unsigned long hash(unsigned char *str)
        // {
        //     unsigned long hash = 5381;
        //     int c;

        //     while (c = *str++)
        //         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        //     return hash;
        // }



    Q:  In this function, it looks like int c is not initialized to any particular value.
        If that is the case, then how does the while loop work?
        Does c need to be initialized to *str?

        Moreover, the while loop does not have a conditional, rather it has an assign character. Should '=' be changed to '=='?

        There is no modulo in this hash function. Is this hash function for something smaller than the 8000 word dictionary I have?
        If I have linked lists, then do I need to add more code to this?

        // unsigned long hash(unsigned char *str)
        // {
        //     unsigned long hash = 5381;
        //     int c;

        //     while (c = *str++)
        //         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        //     return hash;
        // }


    A:


    Q: Should I use this hash function instead?


        Credit: delipity
        Link: https://www.reddit.com/r/cs50/comments/1x6vc8/pset6_trie_vs_hashtable/

        int hash_it(char* needs_hashing)
        {
            unsigned int hash = 0;
            for (int i=0, n=strlen(needs_hashing); i<n; i++)
                hash = (hash << 2) ^ needs_hashing[i];
            return hash % HASHTABLE_SIZE;
        }

    A: Probably, yes. It has a modulo operator and looks to be written specifically for the CS50 problem set.


    Q:  Where does the HASHTABLE_SIZE come from in delipity's hash function?
    A:  This is a number we create, though it is not clear how large an optimal hashtable would be.
        It is most likely dependent on the hash function.
        We can play around with different numbers to see which works best.

    Q:  What does the << 2 syntax do in delipity's hash function?
    A:  It is the shift left bitwise operator in C. Though, I am not sure why we are moving the hash two bits over to the left.
        I doubt we need to understand that.
        It is a part of the hash function we can leave as part of the black box without hindering our programming.

    Q:  What do we do with the integer returned in the hash function?
        How do we use it?
        Is it the location in the hash table we want to store the dictionary word?
        If yes, this brings us back to my original question. How do we create the hash table?
        How do we store values in it?

    A:  Link to explanation: https://cs50.stackexchange.com/questions/1988/implementation-of-hash-table/1989#1989?newreg=47798f9250ed47a38681e7adb3d7a7ee

        It appears if the hashtable exists, then we can treat the table like an array.
        We could create the hashtable as an array.

        Then when we get the hash number, we could store the new node into the linked list at that hash table location.

        Updated:
        To create a hash table of linked lists, we create an array of nodes.
        node *hashtable[50]

        A hash table without linked lists would most likely be an array without type 'node'.

        When an integer is returned from the hash function,
        we put the current word at hashtable[integer returned from hash function].





    Q:  What is a simple hash function, guaranteed to work with the problem?

    A:  CS50's hash function

        unsigned int hash(char *str)
        {
            int sum = 0;
            for (j = 0; str[j] != '\0'; j++)
            {
                sum += str[j]
            }
            return sum % HASH_MAX



Nodes:

    Q:  What is the syntax for my node?

    A:

        typedef struct node
        {
            char word[LENGTH + 1];
            struct node *next;
        }
        node;


    Q:  How does one set the value within a node?
    A:  With pointer notation

        // this creates the nodes
        node *node1 = malloc(sizeof(node));
        node *node1 = malloc(sizeof(node));

        // this sets their values
        strcopy(node1->word, "Hello")
        strcopy(node2->word, "World")

    Q:  When we malloc a node for each word in the dictionary, do we free that memory when we are done?
    A:  Yes, but only at the end of our program. Within the program, the memory needs to be maintained in the hash table.

        Though, we use temporary storage when we collect the characters for a word.

        We then move the word stored in 'bufferWord', the temporary storage, to the hashtable,
        which has it's own memory.

        We might need to free the memory for the temporary storage,
        reset it to zero,
        or ensure we do not add the end of a previous word, onto the end of a new word.


Buffer:

    Q:  What is the syntax for creating temporary storage for a single word in the dictionary?

    A:  Malloc a node * for each new word
        //Create new node for word in dictionary
        node *bufferWord = malloc(sizeof(node));

        // Make sure we did not run out of memory.
        if (bufferWord == NULL)
        {
            unload();
            return false;
        }

        e.g. from Walkthrough

        node *new_node = malloc(sizeof(node));

        if (new_node == NULL)
        {
            unload();
            return false;
        }

    Q:  How do we copy the word into a node?

    A:  copy the word into node
        // copy dictionary word into the 'word' variable in bufferWord
        strcopy(bufferWord->word, word);


        e.g. from Walkthrough
        strcopy(new_node->word, word);

    Q:  In the hashtable, how do I create the first node in each list?
    A:
        This is my best guess
        hashtable[hash] = bufferWord

        but then what would happen if we had a collision?
        How would the function know to add this bufferWord to the beginning of the linked list?


    Q:  How do we insert a node into the list?
    A:  point the new node, next value, to the node head is pointing to.
        head in this case is only the head of one of the linked lists, located at a particular hashtable value.

        If the hashtable is an array of size 50, then there would be 50 head variables

        e.g. from walkthrough

        new_node->next = head;
        head = new_node;

        Each element of the hashtable array is a node pointer to the first node in that linked list.

    Q:  For the hashtable, do we need to create a specific struct, or use the struct node we already created.
    A:  We cannot create a struct specifically for the elements, the heads of the linked lists, in the hashtable.

        Well.. I am not 100% positive. Though, I think since the hashtable array holds linked lists of nodes,
        then it has to be entirely made of 'struct nodes', which each element of the linked list will contain.

        If that is the case, then do we simply leave the value of the head node blank?

        e.g.

            new_node.value = NULL
            new_node.next = head

        Then we

            new_node->next = head;
            head = new_node;


    Q:  Why do we use strcpy(node->value, value); when we want to copy a string,
        and node->pointer = variable, when we want to set a pointer within a node, to a different location?

    A:  Probably a rule to memorize.

        When setting pointers, use '=' operator

        When setting string values within a struct node, use strcpy();



    Q:  How does the head pointer get initalized to NULL?
        How does the head variable get labeled, "head" ?
        It seems like the elements in the hashtable array would be
        hashtable[] <- with a number inserted for the element of the area we want to access.

        Is head actually hashtable[hash]?

        Therefore, we set new_node->next, in our case bufferWord->next, to hashtable[hash]?
        Where 'hash' is the integer that comes out of the hash function

    A:  Maybe we set a variable, 'head,' to equal hashtable[hash],
        where 'hash' is the current integer we got out of the hash function.

        Maybe hashtable[insert int here] would return the head pointer.

        If yes, we can set the head varible to a new value each time we insert a new node.

        We would se the head value to whichever element in the hashtable array
            we needed to insert a new node into.


fread function:

    Q:  can we use a particular element in an array as the buffer?

        Example: fread(buffer[1], sizeof(char), 1, inptr);

        Would the second element in buffer be set to the current value at FILE *inptr?

    A:



BIG QUESTION                                                                                    BIG QUESTION
            BIG QUESTION                                                            BIG QUESTION
                        BIG QUESTION                                    BIG QUESTION
                                    BIG QUESTION            BIG QUESTION
                                                BIG QUESTION


    Q: Since I stored c into the buffer word,
        and I set c to be an integer value,
        did I fill my hash table with integers
        rather than strings?

        Or did the table get filled with strings becuase it all boils down to binary in the end anyway?

        NEED TO CHECK

    A: TBD

        I don't think I did, because bufferWord[] was a char type array.

