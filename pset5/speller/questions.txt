0.  TODO What is pneumonoultramicroscopicsilicovolcanoconiosis?

        According to Merriam-Webster's Medical Dictionary,
        pneumonoultramicroscopicsilicovolcanoconiosis is a
        pneumoconiosis caused by inhalation of very fine
        silicate or quartz dust.


1.  TODO According to its man page, what does getrusage do?

        getrusage() tells us the resources being used by the processes we select.

        If we do RUSAGE_SELF, similar to the speller.c file,
        then we measure the resource usage of all processes in the current thread.

        getrusage returns the resource usage to the structure pointed to by 'usage',
        the second argument in the function.

        They resource usage comes in the form laid out by the 'struct rusage'.

        Details of this layout are given in the getrusage() man page.

2.  TODO Per that same man page, how many members are in a variable of type struct rusage?

        There are 16 members in a variable of type struct rusage.

        Though, not all of them are completed. Unmainted fields are set to zero by the kernal.

3.  TODO Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?

        I think we pass 'before' and 'after' by reference to calculate, rather than by value,
        because then we do not need to make copies of all the information.

        Instead, calculate can look directly into the memory where the values are stored.

        It is more efficient.


4.  TODO Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, convince us that you indeed understand how that function’s for loop works.

        There is a pointer, text, which points to memory of 'characters'.
        The size of this memory chunk is the size of either argv[2] or argv[1].

        The text file is opened in 'read' format.

        We ensure we open the correct text file, not the dictionary,
        by checking to see if the user passed in 2 or 3 command line arguments

        If there are 3 command line arguments, then 'text' is the third command line argument.
        otherwise, it is the second command line argument.

        We only have to check for 3 command line arguments here, argc == 3,
        because we check for 2 or 3 argument earlier on in the program.

        We point to the file, with FILE pointer 'fp'.
        We check to see if fp == NULL to ensure we were able to open the file.


            // try to open text
            char *text = (argc == 3) ? argv[2] : argv[1];
            FILE *fp = fopen(text, "r");
            if (fp == NULL)

        We then declare an integer variable 'c' and store the current char selected by the stream of the FILE pointer fp.
        We go through the loop until we reach the EOF.

        EOF is returned by fgetc when we have reached the end of a file or there was an error.

        When we move to the next iteration of the loop, we store the next char in c, by using whatever char is selected by the stream.

        Throughout this look we check whether there is a character, apostophe, digit, or neither.

        If there is a character, but it is part of a string longer than the max length of a word, 45,
        then we move the stream past the end of the word.

        This is done by using a while loop which iterates over the string until a non-alpha character is reached or we reached the EOF.
        By iterating until the next non-alpha character, we essentially go until there is a space, or a digit.
        If there is a space, we assume we have reach the next word.
        If there is a digit, well it was not a word anyway.

        The index variable is used to track whether we are looking at a character inside a word,
        or we have reached the end of the word.

        We store each character into the variable 'word', until we have reached the end of the word.


        When we reach the end of the word, we call the check() function to check the word's spelling.

        The check() function returns a boolean. True if spelled correctly. False if misspelled.

        We then store the oppositve boolean value of check, into the variable 'misspelled'
        (e.g. if check returns 'true', we store 'false' into misspelled).

        We do this because a 'false' check, means the word was truly misspelled (i.e. misspelled == true).

        We use the misspelled variable in a conditional statement. If the word is misspelled,
        then we print it for the user to see.

        We also track many metrics throughout this process (e.g. # of misspellings, # of words).


        When we have checked one word, The process repeats.

        We reuse the variable 'word' to store the next word, and so on.


        We have to write the check() function, load the dictionary, check the dictionary's size, and unload the dictionary when done.


5.  TODO Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?

        We would probably have to keep reseting the stream.
        Each time we used it, it would increment.
        We would need to use it multiple times to get the values to check the word.

        This would be a lot of inefficient moving around in the code. It could slow us down for a big chunks of text.
        The solution implemented here is more elegant.


6.  TODO Why do you think we declared the parameters for check and load as const (which means "constant")?

        We set word to be an array of a constant size (i.e. 45 characters + 1 termination character).

        The dictionary is a constant size as well (i.e. the size of either the large or small dictionary).










